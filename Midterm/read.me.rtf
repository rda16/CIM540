{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The project initially began with the gaol of creating a game.  I was already developing (trying to develop) an app for my own personal use based on baseball stats, but this time i wanted to make some sort of game.  I started thinking about creating a running game where you control a tack and field runner with the arrow keys and using the space bar to jump over obstacles, but then I got another idea of possibly recreating a browser version of the popular rockband/guitar hero games.  In these music oriented games notes are presented on a screen and the user must input the correct notes for the song to play correctly.  As i started developing the ideas to making this a reality, our classmates started to share their ideas.  I noticed that two or three students had what in my opinion were too similar to what i was thinking of making so i decided to change course.  \
\
Feeling uninspired I was finally hit with another idea during the last lecture before spring break.  When i saw the possibilities of using ode to move objects on screen.  The boxes example used instantly hit me with the idea of furthering the professors example.  I then thought about making multiple boxes or puzzle pieces on screen and then creating a puzzle game.  The first step required a starting picture to use and I chose one that was already saved to my machine to get started.  I specifically chose the puppy picture with him laying in the center surrounded by wood flooring because it seemed the most like e typical image used for a puzzle with the different grooves and patterns that come with wood.  The next step was to cut the image into the pieces i needed.  At first I began to cut them individually, but then realized there had to be a program or website that already provides this function.  Luckily, I was right, and began cutting it into a simple 25 pieces to start with.   \
\
With the working pieces and general idea in place I was ready to code the game.  I started by declaring all the variables i felt were needed and then attributing each puzzle piece to a numbered and named variable.  I thought about creating an array for each piece, but I wasn't sure if it would be the right choice.  Im also not very good with arrays so i figured id stick with code Im more comfortable with working with.  It may not be the most neat and simplified, but if i could get it to work first then I would be satisfied.  I began by preloading the images as we were taught in class when learning how to incorporate images.  I then created the canvas and wanted to also have the puzzle bank on the right hand side of the screen so that the user can select puzzle pieces and place them on the open left hand side.  I always intended for the puzzle pieces to be arranged randomly on the screen, in the puzzle bank,  each time the page was refreshed, but this proved challenging at first.  I honestly struggled with having the pieces not only randomly placed, but also bounded to the area of my intended puzzle bank.  Finally, I was able to figure out the right code for this to work exactly the way I envisioned it, but I later ran onto another more infuriating problem. \
\
I struggle to a great extent when it comes to if statements and this little project truly tested my understanding of them.  The code used was heavily borrowed from the notes taken in class, but in theory it should have worked the same.  Instead of working with two boxes, in this case I was working with 25.  At first I was ecstatic because when testing I was able to click and drag the first three pieces, but later found that the other 22 pieces wouldn't move.  Also, because the pieces were being randomly placed, sometimes pieces would be laid on top of another and the code would register as if i was clicking and moving any piece above and below where the mouse was pointing.  I figured this was due to my boolean statements or possibly my if statements, but nothing I did would fix it; if anything it would create more problems and I would have to go back to the original code with the original problem.  I then thought it may work if I had the pieces evenly laid out in a fixed position, but then that would have made the game way too easy with little replay-ability.  \
\
Once I figure out the moving and dragging of individual pieces I plan to then continue to finalize the game.  I intend to have more than just one picture and to present the user with multiple choices of puzzles to play with.  Or i could just randomize the puzzles with each refresh.  Im also thinking about having it be a times game where a clock ticks down.  This could be a pass or fail mechanic or just a score mechanic to keep track of how long it takes using a ticking up timer.}